@inject Data.AppState  AppState

@using System.Drawing
@using AudioClickRepair.Data

@if (AudioPatch is null)
{
    <h5>Empty</h5>
}
else
{
    <h5>@AudioPatch.StartPosition x @AudioPatch.Length</h5>
}

<img class="mh-100 mw-100" src="data:image/gif;base64,@_imageBase64" @onclick="OnImageClick" />

@code {
    [Parameter]
    public Patch AudioPatch { get; set; }
    [Parameter]
    public ChannelType FromChannel { get; set; }
    [Parameter]
    public int Width { get; set; }
    [Parameter]
    public int Height { get; set; }
    [Parameter]
    public EventCallback<Patch> OnEditorCalled { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        Draw();
    }

    public void Draw()
    {
        if (AudioPatch is null)
            DrawEmpty();
        else
            DrawClick();
    }

    private void DrawEmpty()
    {
        _image = new Bitmap(Width, Height);

        var graphics = Graphics.FromImage(_image);
        graphics.Clear(Color.White);

        StringFormat format = new StringFormat();
        format.LineAlignment = StringAlignment.Center;
        format.Alignment = StringAlignment.Center;
        graphics.DrawString(
            "Empty",
            new Font(FontFamily.GenericSansSerif, Height / 3, FontStyle.Regular),
            Brushes.Gray,
            new RectangleF(0, 0, Width, Height),
            format);

        var ms = new System.IO.MemoryStream();
        _image.Save(ms, System.Drawing.Imaging.ImageFormat.Gif);
        _imageBase64 = Convert.ToBase64String(ms.ToArray());

        graphics.Dispose();
    }

    private void DrawClick()
    {
        SetBorderColour();
        SetPolylines();

        _image = new Bitmap(Width, Height);

        var graphics = Graphics.FromImage(_image);
        graphics.Clear(Color.White);

        DrawPolyline(graphics, _input, Color.Black);
        DrawPolyline(graphics, _output, Color.Red);

        DrawBorder(graphics);

        var ms = new System.IO.MemoryStream();
        _image.Save(ms, System.Drawing.Imaging.ImageFormat.Gif);
        _imageBase64 = Convert.ToBase64String(ms.ToArray());

        graphics.Dispose();
    }

    private void DrawPolyline(Graphics graphics, PointF[] polyline, Color color)
    {
        graphics.DrawLines(new Pen(color, 1), polyline);
    }

    private void DrawBorder(Graphics graphics)
    {
        graphics.DrawRectangle(new Pen(_borderColor, 3), 0, 0, Width, Height);
    }

    private Color _borderColor;
    private PointF[] _input;
    private PointF[] _output;

    private Image _image;
    private string _imageBase64;

    private void SetBorderColour()
    {
        _borderColor = AudioPatch.Approved
            ? Color.FromName("Aqua")
            : Color.FromName("Yellow");
    }

    /// <summary>
    ///     Forms polylines that show input and output audio samples
    /// </summary>
    private void SetPolylines()
    {
        var input = new List<PointF>();
        var output = new List<PointF>();

        // calculate position in audio track to show click
        //in the center of this CW
        var clickWindowStartPositionInAudio = (int)(
            AudioPatch.StartPosition +
            AudioPatch.Length / 2 -
            Width / 2);

        // set Input polylyne
        for (var x = 0; x < Width; x++)
        {
            var sample = AppState.Audio.GetInputSample(
                FromChannel,
                clickWindowStartPositionInAudio + x);

            var y = (float) (Height * (-sample + 1) / 2);
            input.Add(new PointF(x, y));
        }

        // set Output polyline two samples wider than click
        var shift = AudioPatch.StartPosition - clickWindowStartPositionInAudio;
        for (var x = shift - 1;
            x <= shift + AudioPatch.Length + 1;
            x++)
        {
            var sample = AppState.Audio.GetOutputSample(
                FromChannel,
                clickWindowStartPositionInAudio + x);

            var y = (float) (Height * (-sample + 1) / 2);
            output.Add(new PointF(x, y));
        }

        _input = input.ToArray();
        _output = output.ToArray();
    }

    private void OnImageClick(MouseEventArgs e)
    {
        OnEditorCalled.InvokeAsync(AudioPatch);
    }
}
