@page "/upload"

@inject Data.AppState  AppState
@inject IFileReaderService fileReaderService

@using CarefulAudioRepair.Data;
@using AudioInputOutput_NAudio;
@using Blazor.FileReader;
@using System.ComponentModel.DataAnnotations;
@using System.IO;

<h3>Upload</h3>

<div class="card mb-2">
    <h4 class="card-title">Load audio file using URL (link)</h4>
    <div class="card-text">
        <EditForm Model="@_viewerModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="CheckTestUrl">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputText id="uri" @bind-Value="_viewerModel.Uri" />

            <button type="submit" class="btn btn-primary">Upload</button>

            @if (_testMode)
            {
                <!--Test buttons-->
                <button type="submit" class="btn btn-secondary" @onclick="@(_ => { _viewerModel.Uri = "https://programmerincanada.com/wp-content/uploads/2020/03/feet_short_short.wav"; })">Shortest WAV File</button>
                <button type="submit" class="btn btn-secondary" @onclick="@(_ => { _viewerModel.Uri = "https://programmerincanada.com/wp-content/uploads/2020/03/feet_short.wav"; })">Short WAV File</button>
                <button type="submit" class="btn btn-secondary" @onclick="@(_ => { _viewerModel.Uri = "https://programmerincanada.com/wp-content/uploads/2020/03/feet.wav"; })">Full WAV File</button>
                <button type="submit" class="btn btn-secondary" @onclick="@(_ => { _viewerModel.Uri = "https://programmerincanada.com/wp-content/uploads/2020/03/feet_short_stereo.wav"; })">Short (stereo) WAV File</button>
                <button type="submit" class="btn btn-secondary" @onclick="@(_ => { _viewerModel.Uri = "https://programmerincanada.com/wp-content/uploads/2020/03/feet_short.mp3"; })">Short (mono) MP3 File</button>
                <button type="submit" class="btn btn-secondary" @onclick="@(_ => { _viewerModel.Uri = "https://programmerincanada.com/wp-content/uploads/2020/03/feet_short_stereo.mp3"; })">Short (stereo) MP3 File</button>
            }
        </EditForm>
    </div>
</div>

<div class="card mb-2">
    <h4 class="card-title">Load your local audio file</h4>
    <div class="card-text">

        <EditForm Model="_viewerModel" OnSubmit="UploadFile">
            <div>
                <label class="btn btn-primary" for="file">1. Select audio file</label>
                <input style="opacity:0" type="file" id="file" name="file" @ref=localFile @onchange="OnInputChanged" />
            </div>
            <div>
                <p>@localFileName</p>
            </div>
            <div>
                <button class="btn btn-primary">2. Upload</button>
            </div>
        </EditForm>
    </div>
</div>

<h4>@_status</h4>

@code {

    private ElementReference localFile;
    private string localFileName = "No files currently selected for upload";

    private bool _testMode = false;

    private string _status;

    private class ViewerModel
    {
        [Required]
        [Url(ErrorMessage = "Not a valid URL")]
        public string Uri { get; set; }
    }

    private ViewerModel _viewerModel = new ViewerModel();
    private AudioInputOutput _audioIO = new AudioInputOutput();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _status = AppState.Audio is null ? "Please upload audio" : "Audio is uploaded";
    }

    private async Task HandleValidSubmit()
    {
        _status = "Loading...";
        var uri = new Uri(_viewerModel.Uri);
        var result = await _audioIO.LoadAudioFromHttpAsync(uri);

        if (String.IsNullOrEmpty(result.errorMessage))
        {
            AppState.SetAudioData(AudioFromData(result.data));
            _status = "Length (in samples) : " + GetLength();
            AppState.OutputFileNameSuggestion =
                Path.GetFileNameWithoutExtension(uri.LocalPath);
        }
        else
            _status = "Can not load this one: " + result.errorMessage;
    }

    private IAudio AudioFromData(AudioData data)
    {
        var (sampleRate, left, right) = data.ToDouble();

        if (right is null) // mono
        {
            return new Mono(
                left,
                new AudioProcessingSettings() { SampleRate = sampleRate });
        }
        else // stereo
        {
            return new Stereo(
                left,
                right,
                new AudioProcessingSettings() { SampleRate = sampleRate });
        }

    }

    private string GetLength() => AppState.Audio is null
        ? "unknown"
        : AppState.Audio.LengthSamples.ToString();

    private void CheckTestUrl()
    {
        if (_viewerModel.Uri.Equals("test123"))
            _testMode = true;
    }

    private async void UploadFile()
    {
        _status = "Loading...";

        var file = (await fileReaderService.CreateReference(localFile)
            .EnumerateFilesAsync())
                .FirstOrDefault();

        var fileName = (await file.ReadFileInfoAsync()).Name;

        using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4096))
        {
            var result = await _audioIO.LoadAudioFromStreamAsync(memoryStream, fileName);

            if (String.IsNullOrEmpty(result.errorMessage))
            {
                AppState.SetAudioData(AudioFromData(result.data));
                _status = "Length (in samples) : " + GetLength();
                AppState.OutputFileNameSuggestion =
                    Path.GetFileNameWithoutExtension(fileName);
            }
            else
                _status = "Can not load this one: " + result.errorMessage;

            StateHasChanged();
        }
    }

    private async void OnInputChanged()
    {
        var file = (await fileReaderService.CreateReference(localFile)
            .EnumerateFilesAsync())
                .FirstOrDefault();

        localFileName = (await file.ReadFileInfoAsync()).Name;

        StateHasChanged();
    }
}
