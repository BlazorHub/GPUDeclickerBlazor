@page "/upload"

@inject Data.AppState  AppState

@using GPUDeclickerUWP.Model.InputOutput;
@using System.ComponentModel.DataAnnotations;
@using System.IO;

<h3>Upload</h3>

<div class="card mb-2">
    <h4 class="card-title">Load audio file using URL (link)</h4>
    <div class="card-text">
        <EditForm Model="@_viewerModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="CheckTestUrl">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputText id="uri" @bind-Value="_viewerModel.Uri" />

            <button type="submit" class="btn btn-primary">Upload</button>

            @if (_testMode)
            {
                <!--Test buttons-->
                <button type="submit" class="btn btn-secondary" @onclick="@(_ => { _viewerModel.Uri = "https://programmerincanada.com/wp-content/uploads/2020/03/feet_short_short.wav"; })">Shortest WAV File</button>
                <button type="submit" class="btn btn-secondary" @onclick="@(_ => { _viewerModel.Uri = "https://programmerincanada.com/wp-content/uploads/2020/03/feet_short.wav"; })">Short WAV File</button>
                <button type="submit" class="btn btn-secondary" @onclick="@(_ => { _viewerModel.Uri = "https://programmerincanada.com/wp-content/uploads/2020/03/feet.wav"; })">Full WAV File</button>
                <button type="submit" class="btn btn-secondary" @onclick="@(_ => { _viewerModel.Uri = "https://programmerincanada.com/wp-content/uploads/2020/03/feet_short_stereo.wav"; })">Short (stereo) WAV File</button>
                <button type="submit" class="btn btn-secondary" @onclick="@(_ => { _viewerModel.Uri = "https://programmerincanada.com/wp-content/uploads/2020/03/feet_short.mp3"; })">Short (mono) MP3 File</button>
                <button type="submit" class="btn btn-secondary" @onclick="@(_ => { _viewerModel.Uri = "https://programmerincanada.com/wp-content/uploads/2020/03/feet_short_stereo.mp3"; })">Short (stereo) MP3 File</button>
            }
        </EditForm>
    </div>
</div>

<div class="card mb-2">
    <h4 class="card-title">Load your local audio file</h4>
    <div class="card-text">
        <EditForm Model="@_viewerModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="CheckTestUrl">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputFile OnChange="HandleFileSelected" />
        </EditForm>
    </div>
</div>

<h4>@_status</h4>

@code {

    private bool _testMode = false;

    private string _status;

    private class ViewerModel
    {
        [Required]
        [Url(ErrorMessage = "Not a valid URL")]
        public string Uri { get; set; }
    }

    private ViewerModel _viewerModel = new ViewerModel();
    private AudioInputOutput _audioIO = new AudioInputOutput();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _status = AppState.AudioData is null ? "Please load audio" : "Audio is loaded";
    }

    private async Task HandleValidSubmit()
    {
        _status = "Loading...";
        var uri = new Uri(_viewerModel.Uri);
        var result = await _audioIO.LoadAudioFromHttpAsync(uri);
        if (result.success)
        {
            AppState.SetAudioData(_audioIO.GetAudioData());
            _status = "Length (in samples) : " + GetLength();
            AppState.OutputFileNameSuggestion =
                Path.GetFileNameWithoutExtension(uri.LocalPath);
        }
        else
            _status = "Can not load this one: " + result.error;
    }

    private string GetLength() => AppState.AudioData is null
        ? "unknown"
        : AppState.AudioData.LengthSamples().ToString();

    private void CheckTestUrl()
    {
        if (_viewerModel.Uri.Equals("test123"))
            _testMode = true;
    }

    private async void HandleFileSelected(IFileListEntry[] files)
    {
        _status = "Loading...";
        var file = files.FirstOrDefault();
        var result = await _audioIO.LoadAudioFromStreamAsync(file.Data, file.Name);
        if (result.success)
        {
            AppState.SetAudioData(_audioIO.GetAudioData());
            _status = "Length (in samples) : " + GetLength();
            AppState.OutputFileNameSuggestion = 
                Path.GetFileNameWithoutExtension(file.Name);
        }
        else
            _status = "Can not load this one: " + result.error;
        StateHasChanged();
    }
}
