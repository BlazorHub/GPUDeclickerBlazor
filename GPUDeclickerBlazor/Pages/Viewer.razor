@page "/view"

@inject Data.AppState  AppState

@using GPUDeclickerUWP.Model.Processing;
@using GPUDeclickerUWP.Model.Data;

<h3>Viewer</h3>

<h4>Number of clicks : @GetNumberOfClicks()</h4>
<h4>Status : @_taskStatus : @_taskProgress</h4>

<button class="btn btn-primary" @onclick="ScanAsync">Scan</button>

@if (AppState.AudioData is null)
{
    <h4>Please load audio file</h4>
}
else
{
    <ClickCollectionWindow ClickArray="@GetAudioClicks()" Title="Mono" />
}

@code {

    protected override void OnInitialized()
    {
        _progress = new Progress<double>((d) => { _taskProgress = d; StateHasChanged(); });
        _status = new Progress<string>((s) => { _taskStatus = s; StateHasChanged(); });
    }

    private Progress<double> _progress;
    private Progress<string> _status;

    private double _taskProgress;
    private string _taskStatus;

    private async void ScanAsync()
    {
        // set parameters for scanning
        AppState.AudioData.AudioProcessingSettings.ThresholdForDetection =
            5f;
        AppState.AudioData.AudioProcessingSettings.MaxLengthOfCorrection =
            250;

        // scan and repair
        await Task.Run(() => AudioProcessing.ProcessAudioAsync(
            AppState.AudioData,
            _progress,
            _status));
    }

    private string GetNumberOfClicks() => AppState.AudioData is null
        ? "unknown"
        : AppState.AudioData?.CurrentChannelGetNumberOfClicks().ToString();

    private AudioClick[] GetAudioClicks()
    {
        if (AppState.AudioData is null)
            return null;

        var clickList = new List<AudioClick>();
        AppState.AudioData.SortClicks();

        for (var clicksIndex = 0;
              clicksIndex < AppState.AudioData.CurrentChannelGetNumberOfClicks();
              clicksIndex++)
        {
            clickList.Add(AppState.AudioData.GetClick(clicksIndex));
        }

        return clickList.ToArray();
    }
}