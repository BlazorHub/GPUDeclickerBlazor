@page "/view"

@inject Data.AppState  AppState

@using GPUDeclickerUWP.Model.Processing;
@using GPUDeclickerUWP.Model.Data;

<h3>Viewer</h3>

<StatusReport Status="@_taskStatus" Progress="@_taskProgress" />

<SettingsAdjust />

<!--Buttons section-->
<div>
    <div class="float-left">
        <h4><wbr /></h4> <!--balance Scan button position to compensate the Columns: word-->
        <button class="btn btn-primary mb-4" @onclick="ScanAsync">@ScanOrRescan()</button>
    </div>

    <div class="float-right">
        <h4>Columns:</h4>
        <button class="btn btn-primary" @onclick="@(_ => { if (_colNumber > 1) _colNumber--; })">&dArr;</button>
        <h4 class="d-inline">  @_colNumber  </h4>
        <button class="btn btn-primary" @onclick="@(_ => _colNumber++)">&uArr;</button>
    </div>
</div>

<!--Clicks collection-->
<div style="clear:both">
    @if (AppState.AudioData != null)
    {
        if (_inProcess)
        {
            <h4>Waiting for results...</h4>
        }
        else
        {
            if (AppState.AudioData.CurrentChannelIsPreprocessed())
            {
                if (AppState.AudioData.IsStereo)
                {
                <ClickCollectionWindow ClickArray="@AppState.GetAudioClicks(ChannelType.Left)" Title="Left channel" ColNumber="@_colNumber" OnEditorCalled="EditClick" />
                <ClickCollectionWindow ClickArray="@AppState.GetAudioClicks(ChannelType.Right)" Title="Right channel" ColNumber="@_colNumber" OnEditorCalled="EditClick" />
                }
                else
                {
                <ClickCollectionWindow ClickArray="@AppState.GetAudioClicks(ChannelType.Left)" Title="Mono" ColNumber="@_colNumber" OnEditorCalled="EditClick" />
                }
            }
        }
    }
</div>

<!--Modal dialog for Click Editor-->
@if (_editMode)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content" style="background-color:floralwhite">
                <div class="modal-header">
                    <h3 class="modal-title">Edit Click</h3>
                    <button type="button" class="close" @onclick="_ => { _editMode = false; }">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <ClickEditor Click="@_clickForEditing" />
                </div>
            </div>
        </div>
    </div>
}

@code {
    
    private Progress<double> _progress;
    private Progress<string> _status;
    private double _taskProgress;
    private string _taskStatus;

    private bool _inProcess = false;

    private int _colNumber = 4;

    // Click Editor parameters
    private AudioClick _clickForEditing;
    private bool _editMode = false;

    protected override void OnInitialized()
    {
        _progress = new Progress<double>((d) => { _taskProgress = d; StateHasChanged(); });
        _status = new Progress<string>((s) => { _taskStatus = s; StateHasChanged(); });
    }

    private string ScanOrRescan()
    {
        if (AppState.AudioData is null || !AppState.AudioData.CurrentChannelIsPreprocessed())
            return "Scan";
        else
            return "Rescan";
    }

    private void EditClick(AudioClick clickForEditing)
    {
        _clickForEditing = clickForEditing;
        _editMode = true;
    }

    private async void ScanAsync()
    {
        _inProcess = true;

        // scan and repair
        await Task.Run(() => AudioProcessing.ProcessAudioAsync(
            AppState.AudioData,
            _progress,
            _status));

        _inProcess = false;
        StateHasChanged();
    }
}
